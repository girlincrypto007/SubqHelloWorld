"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorateEvents = decorateEvents;
exports.filterEventsSome = filterEventsSome;

var _util = require("@polkadot/util");

var _index = require("../errors/index.cjs");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function filterEventsSome({
  events
}) {
  return events.isSome;
}
/** @internal */


function decorateEvents(registry, {
  lookup,
  pallets
}, metaVersion) {
  const filtered = pallets.filter(filterEventsSome);
  const result = {};

  for (let p = 0; p < filtered.length; p++) {
    const {
      events,
      index,
      name
    } = filtered[p];
    const sectionIndex = metaVersion >= 12 ? index.toNumber() : p;
    const newModule = {};
    const {
      variants
    } = lookup.getSiType(events.unwrap().type).def.asVariant;

    for (let v = 0; v < variants.length; v++) {
      const variant = variants[v]; // we don't camelCase the event name

      newModule[variant.name.toString()] = {
        is: eventRecord => eventRecord.index[0] === sectionIndex && variant.index.eq(eventRecord.index[1]),
        meta: registry.createType('EventMetadataLatest', (0, _index.variantToMeta)(lookup, variant))
      };
    }

    result[(0, _util.stringCamelCase)(name)] = newModule;
  }

  return result;
}