"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorateExtrinsics = decorateExtrinsics;
exports.filterCallsSome = filterCallsSome;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _util = require("@polkadot/util");

var _index = require("../../util/index.cjs");

var _createUnchecked = require("./createUnchecked.cjs");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function filterCallsSome({
  calls
}) {
  return calls.isSome;
}
/** @internal */


function decorateExtrinsics(registry, {
  lookup,
  pallets
}, metaVersion) {
  const filtered = pallets.filter(filterCallsSome);
  const result = {};

  for (let p = 0; p < filtered.length; p++) {
    const {
      calls,
      index,
      name
    } = filtered[p];
    const sectionName = (0, _util.stringCamelCase)(name);
    const sectionIndex = metaVersion >= 12 ? index.toNumber() : p;
    const newModule = {};
    const {
      variants
    } = lookup.getSiType(calls.unwrap().type).def.asVariant;

    for (let v = 0; v < variants.length; v++) {
      const variant = variants[v];
      const args = new Array(variant.fields.length);

      for (let a = 0; a < variant.fields.length; a++) {
        const {
          name,
          type,
          typeName
        } = variant.fields[a];
        args[a] = _objectSpread({
          name: (0, _util.stringCamelCase)(name.unwrapOr(`param${a}`)),
          type: (0, _index.getSiName)(lookup, type)
        }, typeName.isSome ? {
          typeName: typeName.unwrap()
        } : {});
      }

      const callMetadata = registry.createType('FunctionMetadataLatest', _objectSpread(_objectSpread({}, variant), {}, {
        args
      }));
      newModule[(0, _util.stringCamelCase)(callMetadata.name)] = (0, _createUnchecked.createUnchecked)(registry, sectionName, new Uint8Array([sectionIndex, callMetadata.index.toNumber()]), callMetadata);
    }

    result[sectionName] = newModule;
  }

  return result;
}