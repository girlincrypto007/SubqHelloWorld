import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { isFunction, isHex, isString, isU8a, stringify, u8aConcat, u8aToU8a } from '@polkadot/util';
import { AbstractArray } from "./AbstractArray.js";
import { decodeU8a, mapToTypeMap, typeToConstructor } from "./utils/index.js";

/** @internal */
function decodeTuple(registry, _Types, value) {
  if (isU8a(value) || isHex(value)) {
    return decodeU8a(registry, u8aToU8a(value), _Types);
  }

  const Types = Array.isArray(_Types) ? _Types : Object.values(_Types);
  return [Types.map((Type, index) => {
    try {
      const entry = value === null || value === void 0 ? void 0 : value[index];

      if (entry instanceof Type) {
        return entry;
      }

      return new Type(registry, entry);
    } catch (error) {
      throw new Error(`Tuple: failed on ${index}:: ${error.message}`);
    }
  }), 0];
}
/**
 * @name Tuple
 * @description
 * A Tuple defines an anonymous fixed-length array, where each element has its
 * own type. It extends the base JS `Array` object.
 */


var _Types2 = /*#__PURE__*/_classPrivateFieldLooseKey("Types");

export class Tuple extends AbstractArray {
  constructor(registry, Types, value) {
    const Clazzes = Array.isArray(Types) ? Types.map(t => typeToConstructor(registry, t)) : isFunction(Types) || isString(Types) ? [typeToConstructor(registry, Types)] : mapToTypeMap(registry, Types);
    const [values, decodedLength] = decodeTuple(registry, Clazzes, value);
    super(registry, values, decodedLength);
    Object.defineProperty(this, _Types2, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldLooseBase(this, _Types2)[_Types2] = Clazzes;
  }

  static with(Types) {
    return class extends Tuple {
      constructor(registry, value) {
        super(registry, Types, value);
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let total = 0;

    for (let i = 0; i < this.length; i++) {
      total += this[i].encodedLength;
    }

    return total;
  }
  /**
   * @description The types definition of the tuple
   */


  get Types() {
    return Array.isArray(_classPrivateFieldLooseBase(this, _Types2)[_Types2]) ? _classPrivateFieldLooseBase(this, _Types2)[_Types2].map(T => new T(this.registry).toRawType()) : Object.keys(_classPrivateFieldLooseBase(this, _Types2)[_Types2]);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    const types = (Array.isArray(_classPrivateFieldLooseBase(this, _Types2)[_Types2]) ? _classPrivateFieldLooseBase(this, _Types2)[_Types2] : Object.values(_classPrivateFieldLooseBase(this, _Types2)[_Types2])).map(T => this.registry.getClassName(T) || new T(this.registry).toRawType());
    return `(${types.join(',')})`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    // Overwrite the default toString representation of Array.
    return stringify(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      encoded[i] = this[i].toU8a(isBare);
    }

    return u8aConcat(...encoded);
  }

}