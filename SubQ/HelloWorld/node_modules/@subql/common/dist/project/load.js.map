{"version":3,"file":"load.js","sourceRoot":"","sources":["../../src/project/load.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;AAEtC,4CAAoB;AACpB,gDAAwB;AACxB,yDAA+C;AAC/C,qDAA6C;AAC7C,sDAA2B;AAC3B,qCAAoC;AACpC,2CAA+E;AAE/E,SAAgB,kBAAkB,CAAC,IAAY;IAC7C,MAAM,EAAC,GAAG,EAAC,GAAG,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAE/B,IAAI,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,MAAM,IAAI,GAAG,KAAK,OAAO,EAAE;QACxD,MAAM,IAAI,KAAK,CAAC,aAAa,GAAG,gBAAgB,CAAC,CAAC;KACnD;IAED,MAAM,UAAU,GAAG,YAAE,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAClD,OAAO,iBAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC/B,CAAC;AATD,gDASC;AAED,SAAS,YAAY,CAAC,IAAY;IAChC,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,IAAI,YAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,YAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;QAC3D,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;KAC5C;IAED,OAAO,kBAAkB,CAAC,QAAQ,CAAC,CAAC;AACtC,CAAC;AAED,SAAgB,mBAAmB,CAAC,IAAY;IAC9C,MAAM,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM,eAAe,GAAG,IAAI,oCAAwB,CAAC,GAA+B,CAAC,CAAC;IACtF,eAAe,CAAC,QAAQ,EAAE,CAAC;IAC3B,OAAO,eAAe,CAAC;AACzB,CAAC;AALD,kDAKC;AAED,SAAgB,eAAe,CAAC,GAAY;IAC1C,MAAM,UAAU,GAAG,IAAA,gCAAY,EAAC,mBAAU,EAAE,GAAG,CAAC,CAAC;IAEjD,MAAM,MAAM,GAAG,IAAA,8BAAY,EAAC,UAAU,EAAE,EAAC,SAAS,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAC,CAAC,CAAC;IACvF,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,EAAE;QAClB,4BAA4B;QAC5B,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,MAAM,IAAI,KAAK,CAAC,iCAAiC,SAAS,EAAE,CAAC,CAAC;KAC/D;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AAXD,0CAWC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {plainToClass} from 'class-transformer';\nimport {validateSync} from 'class-validator';\nimport yaml from 'js-yaml';\nimport {ChainTypes} from './models';\nimport {ProjectManifestVersioned, VersionedProjectManifest} from './versioned';\n\nexport function loadFromJsonOrYaml(file: string): unknown {\n  const {ext} = path.parse(file);\n\n  if (ext !== '.yaml' && ext !== '.yml' && ext !== '.json') {\n    throw new Error(`Extension ${ext} not supported`);\n  }\n\n  const rawContent = fs.readFileSync(file, 'utf-8');\n  return yaml.load(rawContent);\n}\n\nfunction loadFromFile(file: string): unknown {\n  let filePath = file;\n  if (fs.existsSync(file) && fs.lstatSync(file).isDirectory()) {\n    filePath = path.join(file, 'project.yaml');\n  }\n\n  return loadFromJsonOrYaml(filePath);\n}\n\nexport function loadProjectManifest(file: string): ProjectManifestVersioned {\n  const doc = loadFromFile(file);\n  const projectManifest = new ProjectManifestVersioned(doc as VersionedProjectManifest);\n  projectManifest.validate();\n  return projectManifest;\n}\n\nexport function parseChainTypes(raw: unknown): ChainTypes {\n  const chainTypes = plainToClass(ChainTypes, raw);\n\n  const errors = validateSync(chainTypes, {whitelist: true, forbidNonWhitelisted: true});\n  if (errors?.length) {\n    // TODO: print error details\n    const errorMsgs = errors.map((e) => e.toString()).join('\\n');\n    throw new Error(`failed to parse chain types.\\n${errorMsgs}`);\n  }\n\n  return chainTypes;\n}\n"]}