{"version":3,"file":"codegen-controller.test.js","sourceRoot":"","sources":["../../src/controller/codegen-controller.test.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,6DAAwB;AACxB,+BAA+B;AAC/B,iEAA4B;AAC5B,6DAA6C;AAC7C,mDAA+C;AAE/C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,IAAA,gBAAS,EAAC,gBAAM,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC,CAAC;QAC5E,MAAM,IAAA,gBAAS,EAAC,gBAAM,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,aAAa,GAAG,gBAAgB,CAAC;QACvC,MAAM,CAAC,IAAA,8BAAc,EAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3D,MAAM,CAAC,IAAA,8BAAc,EAAC,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5D,MAAM,CAAC,IAAA,8BAAc,EAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/D,MAAM,CAAC,IAAA,8BAAc,EAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/D,MAAM,CAAC,IAAA,8BAAc,EAAC,aAAa,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,WAAW,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC;QACnE,MAAM,IAAA,4BAAO,EAAC,WAAW,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,WAAW,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC;QACnE,MAAM,MAAM,CAAC,IAAA,4BAAO,EAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport {promisify} from 'util';\nimport rimraf from 'rimraf';\nimport {codegen} from './codegen-controller';\nimport {transformTypes} from './types-mapping';\n\njest.setTimeout(30000);\n\ndescribe('Codegen can generate schema', () => {\n  afterEach(async () => {\n    await promisify(rimraf)(path.join(__dirname, '../../test/schemaTest1/src'));\n    await promisify(rimraf)(path.join(__dirname, '../../test/schemaTest2/src'));\n  });\n\n  it('can transform field into correct type', () => {\n    const testClassName = 'transformTest;';\n    expect(transformTypes(testClassName, 'ID')).toBe('string');\n    expect(transformTypes(testClassName, 'Int')).toBe('number');\n    expect(transformTypes(testClassName, 'BigInt')).toBe('bigint');\n    expect(transformTypes(testClassName, 'String')).toBe('string');\n    expect(transformTypes(testClassName, 'Date')).toBe('Date');\n  });\n\n  it('codegen with correct schema should pass', async () => {\n    const projectPath = path.join(__dirname, '../../test/schemaTest1');\n    await codegen(projectPath);\n  });\n\n  it('codegen with incorrect schema field should fail', async () => {\n    const projectPath = path.join(__dirname, '../../test/schemaTest2');\n    await expect(codegen(projectPath)).rejects.toThrow(/is not an valid type/);\n  });\n});\n"]}