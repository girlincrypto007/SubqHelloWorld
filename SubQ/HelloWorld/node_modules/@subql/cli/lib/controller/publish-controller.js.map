{"version":3,"file":"publish-controller.js","sourceRoot":"","sources":["../../src/controller/publish-controller.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;AAEtC,yDAAoB;AACpB,6DAAwB;AACxB,0CAKuB;AACvB,qFAAoC;AACpC,mEAA2B;AAapB,KAAK,UAAU,YAAY,CAAC,YAAoB,EAAE,UAAkB;IACzE,MAAM,IAAI,GAAG,0BAAI,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,YAAY,EAAC,CAAC,CAAC;IAE9C,MAAM,mBAAmB,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;IACrE,MAAM,QAAQ,GAAG,IAAA,4BAAmB,EAAC,mBAAmB,CAAC,CAAC,MAAM,CAAC;IAEjE,IAAI,IAAA,yBAAgB,EAAC,QAAQ,CAAC,EAAE;QAC9B,MAAM,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACrE,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;QAExC,kCAAkC;QAClC,MAAM,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAChD,CAAC,UAAU,EAAE,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAC3C,UAAU,CAAC,IAAI,EAAE,YAAE,CAAC,gBAAgB,CAAC,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,GAAG,EAAE,CAAC,CACzG,CACF,CAAC;QAEF,4CAA4C;QAC5C,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC;QAE9B,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE;YACxC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC;QACxD,CAAC,CAAC,CAAC;KACJ;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;KAC/E;IAED,gBAAgB;IAChB,OAAO,UAAU,CAAC,IAAI,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;AACpD,CAAC;AA7BD,oCA6BC;AAED,KAAK,UAAU,UAAU,CAAC,IAAyB,EAAE,OAAiC;IACpF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAC,CAAC,CAAC;IACnE,OAAO,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;AAC/B,CAAC;AAED,SAAS,cAAc,CAAC,QAA+D;IACrF,OAAO,iBAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;QACzB,QAAQ,EAAE,IAAI;QACd,YAAY,EAAE,IAAI;KACnB,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {\n  loadProjectManifest,\n  manifestIsV0_2_0,\n  ProjectManifestV0_0_1Impl,\n  ProjectManifestV0_2_0Impl,\n} from '@subql/common';\nimport IPFS from 'ipfs-http-client';\nimport yaml from 'js-yaml';\n\n// https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#filecontent\ntype FileContent = Uint8Array | string | Iterable<Uint8Array> | Iterable<number> | AsyncIterable<Uint8Array>;\n\n// https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#fileobject\ntype FileObject = {\n  path?: string;\n  content?: FileContent;\n  mode?: number | string;\n  mtime?: Date | number[] | {secs: number; nsecs?: number};\n};\n\nexport async function uploadToIpfs(ipfsEndpoint: string, projectDir: string): Promise<string> {\n  const ipfs = IPFS.create({url: ipfsEndpoint});\n\n  const projectManifestPath = path.resolve(projectDir, 'project.yaml');\n  const manifest = loadProjectManifest(projectManifestPath).asImpl;\n\n  if (manifestIsV0_2_0(manifest)) {\n    const entryPaths = manifest.dataSources.map((ds) => ds.mapping.file);\n    const schemaPath = manifest.schema.file;\n\n    // Upload referenced files to IPFS\n    const [schema, ...entryPoints] = await Promise.all(\n      [schemaPath, ...entryPaths].map((filePath) =>\n        uploadFile(ipfs, fs.createReadStream(path.resolve(projectDir, filePath))).then((cid) => `ipfs://${cid}`)\n      )\n    );\n\n    // Update referenced file paths to IPFS cids\n    manifest.schema.file = schema;\n\n    entryPoints.forEach((entryPoint, index) => {\n      manifest.dataSources[index].mapping.file = entryPoint;\n    });\n  } else {\n    throw new Error('Unsupported project manifest spec, only 0.2.0 is supported');\n  }\n\n  // Upload schema\n  return uploadFile(ipfs, toMinifiedYaml(manifest));\n}\n\nasync function uploadFile(ipfs: IPFS.IPFSHTTPClient, content: FileObject | FileContent): Promise<string> {\n  const result = await ipfs.add(content, {pin: true, cidVersion: 0});\n  return result.cid.toString();\n}\n\nfunction toMinifiedYaml(manifest: ProjectManifestV0_0_1Impl | ProjectManifestV0_2_0Impl): string {\n  return yaml.dump(manifest, {\n    sortKeys: true,\n    condenseFlow: true,\n  });\n}\n"]}