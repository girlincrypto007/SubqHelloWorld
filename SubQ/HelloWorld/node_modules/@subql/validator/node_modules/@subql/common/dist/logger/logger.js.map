{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/logger/logger.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;AAEtC,qCAAkC;AAClC,gDAA2C;AAC3C,qCAA4C;AAQ5C,MAAa,MAAM;IAIjB,YAAY,EAAC,KAAK,EAAE,QAAQ,GAAG,MAAM,EAAE,SAAS,EAAE,YAAY,EAAe;QAFrE,iBAAY,GAAsC,EAAE,CAAC;QAG3D,IAAI,CAAC,IAAI,GAAG,IAAA,cAAI,EAAC;YACf,UAAU,EAAE,SAAS;YACrB,SAAS,EAAE,GAAG,EAAE,CAAC,iBAAiB,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG;YAC7D,SAAS;YACT,KAAK,EAAE,QAAQ;YACf,UAAU,EAAE;gBACV,KAAK,CAAC,KAAK,EAAE,MAAM;oBACjB,OAAO,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC;gBACxB,CAAC;aACF;YACD,WAAW,EACT,YAAY,KAAK,MAAM;gBACrB,CAAC,CAAC;oBACE,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;wBACjB,IAAI,KAAK,YAAY,KAAK,EAAE;4BAC1B,OAAO;gCACL,IAAI,EAAE,OAAO;gCACb,IAAI,EAAE,KAAK,CAAC,IAAI;gCAChB,OAAO,EAAE,KAAK,CAAC,OAAO;gCACtB,KAAK,EAAE,KAAK,CAAC,KAAK;6BACnB,CAAC;yBACH;6BAAM;4BACL,OAAO,IAAA,mBAAS,EAAC,KAAK,CAAC,CAAC;yBACzB;oBACH,CAAC;iBACF;gBACH,CAAC,CAAC,EAAE;YACR,WAAW,EAAE,YAAY,KAAK,MAAM;YACpC,UAAU,EAAE,UAAU,OAAgB;gBACpC,uCAAuC;gBACvC,2CAA2C;gBAC3C,OAAO,SAAS,UAAU,CAAC,SAA0B;oBACnD,IAAI,SAAS,CAAC;oBACd,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;wBACjC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;qBACnC;yBAAM,IAAI,QAAQ,CAAC,SAAS,CAAC,EAAE;wBAC9B,SAAS,GAAG,SAAS,CAAC;qBACvB;oBACD,IAAI,CAAC,SAAS;wBAAE,OAAO,SAAS,CAAC;oBACjC,2BAA2B;oBAC3B,MAAM,EAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAC,GAAG,SAAS,CAAC;oBAC5D,IAAI,KAAK,GAAG,EAAE,CAAC;oBACf,IAAI,OAAO,YAAY,KAAK,EAAE;wBAC5B,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;4BACzC,KAAK,GAAG,KAAK,OAAO,CAAC,KAAK,EAAE,CAAC;yBAC9B;6BAAM;4BACL,KAAK,GAAG,GAAG,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,OAAO,EAAE,CAAC;yBAC/C;qBACF;oBACD,OAAO,GAAG,IAAI,KAAK,YAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAA,sBAAa,EAAC,KAAK,CAAC,IAAI,OAAO,IAAI,KAAK,IAAI,CAAC;gBAClG,CAAC,CAAC;gBAEF,SAAS,QAAQ,CAAC,KAAc;oBAC9B,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAAC;gBACtE,CAAC;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,SAAS,CAAC,QAAgB;QACxB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;YAChC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAC,QAAQ,EAAC,CAAC,CAAC;SAC3D;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,QAAQ,CAAC,KAAsB;QAC7B,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC1B,CAAC;CACF;AA1ED,wBA0EC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {stringify} from 'flatted';\nimport Pino, {LevelWithSilent} from 'pino';\nimport {colorizeLevel, ctx} from './colors';\n\nexport interface LoggerOption {\n  outputFormat?: 'json' | 'colored';\n  level?: string;\n  nestedKey?: string;\n}\n\nexport class Logger {\n  private pino: Pino.Logger;\n  private childLoggers: {[category: string]: Pino.Logger} = {};\n\n  constructor({level: logLevel = 'info', nestedKey, outputFormat}: LoggerOption) {\n    this.pino = Pino({\n      messageKey: 'message',\n      timestamp: () => `,\"timestamp\":\"${new Date().toISOString()}\"`,\n      nestedKey,\n      level: logLevel,\n      formatters: {\n        level(label, number) {\n          return {level: label};\n        },\n      },\n      serializers:\n        outputFormat === 'json'\n          ? {\n              payload: (value) => {\n                if (value instanceof Error) {\n                  return {\n                    type: 'error',\n                    name: value.name,\n                    message: value.message,\n                    stack: value.stack,\n                  };\n                } else {\n                  return stringify(value);\n                }\n              },\n            }\n          : {},\n      prettyPrint: outputFormat !== 'json',\n      prettifier: function (options: unknown) {\n        // `this` is bound to the pino instance\n        // Deal with whatever options are supplied.\n        return function prettifier(inputData: string | object) {\n          let logObject;\n          if (typeof inputData === 'string') {\n            logObject = JSON.parse(inputData);\n          } else if (isObject(inputData)) {\n            logObject = inputData;\n          }\n          if (!logObject) return inputData;\n          // implement prettification\n          const {category, level, message, payload, time} = logObject;\n          let error = '';\n          if (payload instanceof Error) {\n            if (['debug', 'trace'].includes(logLevel)) {\n              error = `\\n${payload.stack}`;\n            } else {\n              error = `${payload.name}: ${payload.message}`;\n            }\n          }\n          return `${time} <${ctx.magentaBright(category)}> ${colorizeLevel(level)} ${message} ${error}\\n`;\n        };\n\n        function isObject(input: unknown): boolean {\n          return Object.prototype.toString.apply(input) === '[object Object]';\n        }\n      },\n    });\n  }\n\n  getLogger(category: string): Pino.Logger {\n    if (!this.childLoggers[category]) {\n      this.childLoggers[category] = this.pino.child({category});\n    }\n    return this.childLoggers[category];\n  }\n\n  setLevel(level: LevelWithSilent): void {\n    this.pino.level = level;\n  }\n}\n"]}